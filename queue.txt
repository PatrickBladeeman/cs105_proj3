#include <stdio.h>
#include <iostream>
#include <string.h>
#include <iomanip>
#include <fstream>
#include "queue.h"
using namespace std;

// Node structure for the linked list

struct Node {
    string name;
    int num;
    Node* next;
    // Node(const T& val) : data(val), next(nullptr) {}
};

// Dynamic Queue class

class Queue {
private:
    Node* first; // Front of the queue
    Node* last;  // Rear of the queue

public:
    // Constructor
    Queue();
    Queue(string nameIn, int numIn);

    // Destructor
    ~Queue() {
        while (!isEmpty()) {
            dequeue();
        }
    }

    // Check if the queue is empty
    bool isEmpty() const {
        return first == nullptr;
    }

    // Enqueue a new element
    void enqueue(string name, string num) {
        Node* newNode = new Node(name, num);
        if (isEmpty()) {
            first = last = newNode;
        } else {
            last->next = newNode;
            last = newNode;
        }
    }

    // Dequeue an element
    void dequeue() {
        if (isEmpty()) {
            cerr << "Queue is empty. Cannot dequeue.\n";
            return;
        }

        Node* temp = first;
        first = first->next;

        if (first == nullptr) {
            last = nullptr; // Queue is empty after dequeue
        }

        delete temp;
    }

    // Display the elements in the queue
    void display() const {
        if (isEmpty()) {
            std::cout << "Queue is empty.\n";
            return;
        }

        Node* current = first;
        while (current != nullptr) {
            std::cout << current->name << " " << current->num << endl;
            current = current->next;
        }
        std::cout << "\n";
    }

    int peekNum()
};

int main() {
    Queue<int> myQueue;

    myQueue.enqueue(10);
    myQueue.enqueue(20);
    myQueue.enqueue(30);

    std::cout << "Queue elements: ";
    myQueue.display();

    myQueue.dequeue();

    std::cout << "After dequeue: ";
    myQueue.display();

    return 0;
}